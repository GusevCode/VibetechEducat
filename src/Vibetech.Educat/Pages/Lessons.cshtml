@page
@model LessonsModel
@{
    ViewData["Title"] = "Мои уроки";
    
    // Function to translate LessonStatus to Russian
    string TranslateStatus(Vibetech.Educat.Common.Models.LessonStatus status)
    {
        return status switch
        {
            Vibetech.Educat.Common.Models.LessonStatus.Scheduled => "Запланировано",
            Vibetech.Educat.Common.Models.LessonStatus.InProgress => "В процессе",
            Vibetech.Educat.Common.Models.LessonStatus.Completed => "Завершено",
            Vibetech.Educat.Common.Models.LessonStatus.Cancelled => "Отменено",
            _ => status.ToString()
        };
    }
    
    // Function to get CSS class for status
    string GetStatusClass(Vibetech.Educat.Common.Models.LessonStatus status)
    {
        return status switch
        {
            Vibetech.Educat.Common.Models.LessonStatus.Scheduled => "bg-primary",
            Vibetech.Educat.Common.Models.LessonStatus.InProgress => "bg-success",
            Vibetech.Educat.Common.Models.LessonStatus.Completed => "bg-info",
            Vibetech.Educat.Common.Models.LessonStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    // Helper to get sort URL
    string GetSortUrl(string field)
    {
        string order = Model.SortField == field 
            ? (Model.SortOrder == "asc" ? "desc" : "asc") 
            : "asc";
        
        return Url.Page("", new { 
            SortField = field, 
            SortOrder = order,
            StatusFilter = Model.StatusFilter,
            SearchTerm = Model.SearchTerm,
            CurrentPage = 1 // Reset to first page on sort change
        });
    }
    
    // Helper to generate sort icon
    string GetSortIcon(string field)
    {
        if (Model.SortField != field)
            return "bi-arrow-down-up text-muted";
        
        return Model.SortOrder == "asc" 
            ? "bi-sort-down-alt" 
            : "bi-sort-up-alt";
    }
}

<div class="container mt-4">
    <div class="d-flex justify-content-between mb-4">
        <h2>@ViewData["Title"]</h2>
        <a asp-page="/Teacher/CreateLesson" class="btn btn-primary">
            <i class="bi bi-plus-lg"></i> Новый урок
        </a>
    </div>
    
    <!-- Search and Filter Controls -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Поиск по предмету или студенту" 
                               name="SearchTerm" value="@Model.SearchTerm">
                        <button class="btn btn-outline-secondary" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" name="StatusFilter" onchange="this.form.submit()">
                        <option value="" selected="@string.IsNullOrEmpty(Model.StatusFilter)">Все статусы</option>
                        <option value="Scheduled" selected="@(Model.StatusFilter == "Scheduled")">Запланировано</option>
                        <option value="InProgress" selected="@(Model.StatusFilter == "InProgress")">В процессе</option>
                        <option value="Completed" selected="@(Model.StatusFilter == "Completed")">Завершено</option>
                        <option value="Cancelled" selected="@(Model.StatusFilter == "Cancelled")">Отменено</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="d-flex">
                        <a href="@Url.Page("", new { SortField = "ScheduledStart", SortOrder = "desc" })" 
                           class="btn btn-outline-secondary me-2 @(Model.SortField == "ScheduledStart" && Model.SortOrder == "desc" ? "active" : "")">
                            <i class="bi bi-sort-numeric-down"></i> Сначала новые
                        </a>
                        <a href="@Url.Page("", new { SortField = "ScheduledStart", SortOrder = "asc" })" 
                           class="btn btn-outline-secondary @(Model.SortField == "ScheduledStart" && Model.SortOrder == "asc" ? "active" : "")">
                            <i class="bi bi-sort-numeric-up"></i> Сначала старые
                        </a>
                    </div>
                </div>
                <div class="col-md-2">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.StatusFilter))
                    {
                        <a href="@Url.Page("", new { SortField = Model.SortField, SortOrder = Model.SortOrder })" 
                           class="btn btn-outline-danger w-100">
                            <i class="bi bi-x-circle"></i> Сбросить фильтры
                        </a>
                    }
                </div>
                
                <!-- Hidden fields to preserve sorting on filter change -->
                <input type="hidden" name="SortField" value="@Model.SortField">
                <input type="hidden" name="SortOrder" value="@Model.SortOrder">
                <input type="hidden" name="CurrentPage" value="1"> <!-- Reset to first page on filter change -->
            </form>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @Model.ErrorMessage
        </div>
    }
    else if (!Model.Lessons.Any())
    {
        <div class="alert alert-info" role="alert">
            <i class="bi bi-info-circle me-2"></i>
            @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.StatusFilter))
            {
                <span>Нет уроков, соответствующих заданным критериям. <a href="@Url.Page("")">Сбросить фильтры</a></span>
            }
            else
            {
                <span>У вас пока нет уроков. Создайте свой первый урок, нажав на кнопку "Новый урок".</span>
            }
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var lesson in Model.Lessons)
            {
                <div class="col-md-4 mb-4">
                    <div class="card lesson-card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@(lesson.Subject?.Name ?? "Предмет не указан")</h5>
                            <p class="card-text">
                                <i class="bi bi-person"></i> 
                                @(lesson.Student != null ? $"{lesson.Student.LastName} {lesson.Student.FirstName}" : "Студент не назначен")
                            </p>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="badge @GetStatusClass(lesson.Status)">@TranslateStatus(lesson.Status)</span>
                                <small class="text-muted">@(lesson.ScheduledStart != default ? lesson.ScheduledStart.ToLocalTime().ToString("dd.MM.yyyy HH:mm") : "Время не указано")</small>
                            </div>
                            <div class="mt-3">
                                <a asp-page="/Teacher/LessonDetails" asp-route-id="@lesson.Id" class="btn btn-outline-primary btn-sm w-100">
                                    <i class="bi bi-arrow-right-circle"></i> Перейти на урок
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <nav>
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Page("", new { CurrentPage = Model.CurrentPage - 1, SortField = Model.SortField, SortOrder = Model.SortOrder, StatusFilter = Model.StatusFilter, SearchTerm = Model.SearchTerm })">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                    </li>
                    
                    @{
                        int startPage = Math.Max(1, Model.CurrentPage - 2);
                        int endPage = Math.Min(Model.TotalPages, startPage + 4);
                        
                        if (endPage - startPage < 4)
                        {
                            startPage = Math.Max(1, endPage - 4);
                        }
                    }
                    
                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Page("", new { CurrentPage = 1, SortField = Model.SortField, SortOrder = Model.SortOrder, StatusFilter = Model.StatusFilter, SearchTerm = Model.SearchTerm })">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Page("", new { CurrentPage = i, SortField = Model.SortField, SortOrder = Model.SortOrder, StatusFilter = Model.StatusFilter, SearchTerm = Model.SearchTerm })">@i</a>
                        </li>
                    }
                    
                    @if (endPage < Model.TotalPages)
                    {
                        @if (endPage < Model.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a class="page-link" href="@Url.Page("", new { CurrentPage = Model.TotalPages, SortField = Model.SortField, SortOrder = Model.SortOrder, StatusFilter = Model.StatusFilter, SearchTerm = Model.SearchTerm })">@Model.TotalPages</a>
                        </li>
                    }
                    
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Page("", new { CurrentPage = Model.CurrentPage + 1, SortField = Model.SortField, SortOrder = Model.SortOrder, StatusFilter = Model.StatusFilter, SearchTerm = Model.SearchTerm })">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    </li>
                </ul>
            </nav>
            
            <div class="text-center text-muted mb-4">
                Показаны уроки @((Model.CurrentPage - 1) * Model.PageSize + 1)-@(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalLessons)) из @Model.TotalLessons
            </div>
        }
    }
</div>